\documentclass{beamer}

\mode<presentation>
{
  \usetheme{Singapore}
  % \setbeamercovered{transparent}
}


\usepackage[utf8]{inputenc}
\usepackage{polski}
\usepackage{graphicx}

% \usepackage{times}

% For pygmentize
\usepackage{fancyvrb}
\usepackage{color}

\input{styles}


\title{Dlaczego python śmierdzi?}

\author[]{Szymon Pyżalski}

\institute{Grupa Allegro}

\date {PyConPL 2014}


\begin{document}

\begin{frame}
  \titlepage 
  \url{http://github.com/zefciu/python-sucks/}
\end{frame}

\begin{frame}{O czym będzie...}
  \tableofcontents
  %\pausesections
\end{frame}


\section{Dlaczego ta prezentacja?}

\begin{frame}{O czym nie będzie?}
    \includegraphics[width=0.8\paperwidth]{derp1}
\end{frame}

\begin{frame}{O czym nie będzie?}
    \includegraphics[width=0.8\paperwidth]{derp2}
\end{frame}

\begin{frame}{O czym nie będzie?}
    \includegraphics[width=0.8\paperwidth]{derp3}
\end{frame}

\begin{frame}{Czego nie atakujemy?}

  \begin{itemize}
  \pause
  \item
      Paradygmatu
  \pause
  \item
      Zen
  \pause
  \item
      Tego co czyni Pythona szczególnym
  \end{itemize}
\end{frame}

\begin{frame}{Co może śmierdzieć?}
    \pause
    To co śmierdzi w Pythonie to wyłącznie defekty, które są sprzeczne
    lub niezależne od paradygmatem i ,,charakteru'' języka.
\end{frame}


\section{Dlaczego wyjątki śmierdzą?}

\begin{frame}{Wyjątki}
    \begin{itemize}
    \pause
    \item
        Spełniają bardzo kluczowe role
    \pause
    \item
        Reguła EAFP jako uznany punkt \emph{designu} języka
    \pause
    \item
        Bardzo proste
    \pause
    \item
        Ich obsługa mało się różni od innych języków
    \end{itemize}
\end{frame}

\begin{frame}{Przykład}
\tiny{
\input{exceptions}
}
\end{frame}

\begin{frame}{Alternatywy?}
    \begin{itemize}
    \pause
    \item
        Bardziej rozbudowany standard wyjątków
    \pause
    \item
        \emph{Pattern matching}
    \end{itemize}
\end{frame}

\section{Model obiektowy - no super}

\begin{frame}{Wywołanie klasy bazowej}
    \begin{itemize}
    \pause
    \item
        Mamy dwie metody wywołania klasy bazowej (a co na to zen?)
    \pause
    \item 
        \Verb|super| nie wywołuje nadklasy
    \pause
    \item
        Musimy użyć w całej hierarchii tej samej metody
    \pause
    \item
        Jeśli nie - wyniki są nieprzewidywalne
    \end{itemize}
\end{frame}

\section{ABC - WTF?}

\begin{frame}{Czym miało być abc}
    \begin{itemize}
    \pause
    \item
        Dynamiczny system typów
    \pause
    \item 
        Zgodne z koncepcją duck-typing
    \pause
    \item
        Użycie \Verb|isinstance| jest znowu OK
    \pause
    \item
        Jeśli coś zostało nazwane kaczką, to jest to kaczka
    \end{itemize}
\end{frame}

\begin{frame}{Dziedziczenie}
\small{
\input{abc-inherit}
}
\end{frame}

\begin{frame}{Rejestracja}
\tiny{
\input{abc-register}
}
\end{frame}

\section{No to jaki jest ten paradygmat?}

\begin{frame}{Stosunek pythona do wyrażeń}
    \begin{itemize}
    \pause
    \item
        Operator przypisania nie może wystąpić w wyrażeniu
    \pause
    \item 
        Mamy lambdę ograniczoną do wyrażenia
    \pause
    \item
        Mamy komprehensje ograniczone do wyrażenia
    \pause
    \item
        Ale python podobno nie jest językiem funkcyjnym!
    \end{itemize}
\end{frame}

\section{Głupie pomysły}

\begin{frame}{Krótka lista}
    \begin{itemize}
    \pause
    \item
        Krotki tworzące się przy zostawieniu przecinka
    \pause
    \item 
        \Verb|2 < 'dwa'| - to jest silne typowanie?
    \pause
    \item 
        To w końcu typy piszemy z wielkiej litery? Tak jak \Verb|dict|?
    \end{itemize}
\end{frame}

\end{document}
